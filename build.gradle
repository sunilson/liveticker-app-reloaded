// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.41'
    repositories {
        google()
        jcenter()
		maven { url "https://dl.bintray.com/kittinunf/maven" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.0'  // Google Services plugin
		def nav_version = "2.1.0-alpha05"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'jacoco'
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://dl.bintray.com/kittinunf/maven" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'jacoco'

    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                compileSdkVersion 29
                buildToolsVersion "29.0.0"

                defaultConfig {
                    minSdkVersion 21
                    targetSdkVersion 29
                    versionCode 1
                    versionName "1.0"
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }

                kotlinOptions {
                    jvmTarget = "1.8"
                }

                testOptions {
                    unitTests.all {
                        useJUnitPlatform()
                    }

                    unitTests.returnDefaultValues = true
                }

                packagingOptions {
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/license.txt'
                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/NOTICE.txt'
                    exclude 'META-INF/notice.txt'
                    exclude 'META-INF/ASL2.0'
                    exclude 'META-INF/LICENSE-notice.md'
                    exclude 'META-INF/LICENSE.md'
                }
            }
        }
    }
}

gradle.projectsEvaluated {
    def filtered = subprojects.findAll {it.name != "buildSrc"}

    task mergedReport(type: JacocoReport) {
        group "reporting"
        executionData fileTree(project.rootDir.absolutePath).include("**/*.exec", "**/*.ec")

        reports {
            html.enabled = true
            html.destination = file("./reports/jacoco")
        }

        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*'
        ]

        def classFiles = []
        def sourceDirectories = []

        filtered.each {
            def debugTree = fileTree(dir: "${it.buildDir}/intermediates/classes/debug", excludes: excludes)
            def kotlinDebugTree = fileTree(dir: "${it.buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
            classFiles.addAll([debugTree, kotlinDebugTree])

            sourceDirectories.addAll([
                    fileTree(dir: "${it.projectDir}/src/main/java"),
                    fileTree(dir: "${it.projectDir}/src/debug/java")
            ])
        }

        classDirectories = files(classFiles)
        additionalSourceDirs = files(sourceDirectories)
        sourceDirectories = files(sourceDirectories)
    }

    mergedReport.dependsOn {
        filtered*.test
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


